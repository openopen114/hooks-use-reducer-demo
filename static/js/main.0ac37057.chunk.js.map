{"version":3,"sources":["components/Count.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","Type","Count","useReducer","count","dispatch","onClick","todos","console","log","push","title","complete","map","item","index","splice","TodoList","useState","inputText","setInputText","onSubmit","e","preventDefault","type","value","onChange","target","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAEA,SAASA,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,MACH,OAAOF,EAAQ,EACjB,IAAK,MACH,OAAOA,EAAQ,EACjB,QACE,OAAOA,GAIE,SAASG,IAAS,IAAD,EACJC,qBAAWL,EAAS,GADhB,mBACvBM,EADuB,KAChBC,EADgB,KAG9B,OACE,6BACE,uCAAaD,GACb,4BAAQE,QAAS,kBAAMD,EAAS,CAAEJ,KAAM,UAAxC,SACA,4BAAQK,QAAS,kBAAMD,EAAS,CAAEJ,KAAM,UAAxC,U,MCjBN,SAASH,EAAQC,EAAOC,GAAS,IACzBO,EAAUR,EAAVQ,MAEN,OAAQP,EAAOC,MAEb,IAAK,MAGH,OAFAO,QAAQC,IAAIT,GACZO,EAAMG,KAAK,CAAEC,MAAOX,EAAOW,MAAOC,UAAU,IACrC,CAAEL,SAEX,IAAK,OACH,OAAOR,EAAMQ,MAAMM,KAAI,SAACC,EAAMC,GACxBf,EAAOe,QAAUA,IACnBD,EAAKF,UAAW,MAItB,IAAK,SAGH,OAFAJ,QAAQC,IAAIT,GACZO,EAAMS,OAAOhB,EAAOe,MAAO,GACpB,CAAER,SACX,QACE,OAAOR,GAIE,SAASkB,IAAY,IAAD,EACHd,qBAAWL,EAAS,CAChDS,MAAO,CACL,CAAEI,MAAO,MAAOC,UAAU,GAC1B,CAAED,MAAO,MAAOC,UAAU,MAJG,mBACxBL,EADwB,KACxBA,MAASF,EADe,OAQCa,mBAAS,IARV,mBAQ1BC,EAR0B,KAQfC,EARe,KAUjC,OACE,6BACE,yCAEA,0BACEC,SAAU,SAAAC,GACRA,EAAEC,iBAEFlB,EAAS,CAAEJ,KAAM,MAAOU,MADVQ,IAEdC,EAAa,MAGf,2BACEI,KAAK,OACLC,MAAON,EACPO,SAAU,SAAAJ,GAAC,OAAIF,EAAaE,EAAEK,OAAOF,WAKzC,4BACGlB,EAAMM,KAAI,SAACC,EAAMC,GAChB,OACE,wBAAIa,IAAKb,GACND,EAAKH,MAAO,IACb,4BAAQL,QAAS,kBAAMD,EAAS,CAAEJ,KAAM,SAAUc,YAAlD,W,OChDCc,MAXf,WACE,OACE,yBAAKC,UAAU,cAEb,kBAAC5B,EAAD,MAEA,kBAACe,EAAD,QCCcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0ac37057.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.Type) {\r\n    case \"INC\":\r\n      return state + 1;\r\n    case \"DEC\":\r\n      return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function Count() {\r\n  const [count, dispatch] = useReducer(reducer, 0);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Count : {count}</h1>\r\n      <button onClick={() => dispatch({ Type: \"DEC\" })}> DEC </button>\r\n      <button onClick={() => dispatch({ Type: \"INC\" })}> INC </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useReducer, useState } from \"react\";\r\nimport { interfaceDeclaration } from \"@babel/types\";\r\n\r\nfunction reducer(state, action) {\r\n  let { todos } = state;\r\n\r\n  switch (action.Type) {\r\n    //   ADD\r\n    case \"ADD\":\r\n      console.log(action);\r\n      todos.push({ title: action.title, complete: false });\r\n      return { todos };\r\n    //   DONE\r\n    case \"DONE\":\r\n      return state.todos.map((item, index) => {\r\n        if (action.index === index) {\r\n          item.complete = true;\r\n        }\r\n      });\r\n    //   REMOVE\r\n    case \"REMOVE\":\r\n      console.log(action);\r\n      todos.splice(action.index, 1);\r\n      return { todos };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function TodoList() {\r\n  const [{ todos }, dispatch] = useReducer(reducer, {\r\n    todos: [\r\n      { title: \"aaa\", complete: false },\r\n      { title: \"bbb\", complete: false }\r\n    ]\r\n  });\r\n\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <h1>Todo List</h1>\r\n      {/* form */}\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          const title = inputText;\r\n          dispatch({ Type: \"ADD\", title });\r\n          setInputText(\"\");\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          value={inputText}\r\n          onChange={e => setInputText(e.target.value)}\r\n        />\r\n      </form>\r\n\r\n      {/* list */}\r\n      <ul>\r\n        {todos.map((item, index) => {\r\n          return (\r\n            <li key={index}>\r\n              {item.title}{\" \"}\r\n              <button onClick={() => dispatch({ Type: \"REMOVE\", index })}>\r\n                X\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n\r\n      {/* <pre>{JSON.stringify({ todos }, null, 2)}</pre> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Count from \"./components/Count\";\nimport TodoList from \"./components/TodoList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      {/* Count */}\n      <Count></Count>\n\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}